name: CD

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]

env:
  GO_VERSION: '1.21'
  BUN_VERSION: '1.0.0'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy-staging:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push staging image with Bake
        uses: docker/bake-action@v4
        with:
          push: true
          targets: app
          set: |
            app.tags=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging
            *.cache-from=type=gha
            *.cache-to=type=gha,mode=max
          files: |
            ./environment/docker/docker-bake.hcl
        env:
          REGISTRY: ${{ env.REGISTRY }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          TAG: staging
          GO_VERSION: ${{ env.GO_VERSION }}
          BUN_VERSION: ${{ env.BUN_VERSION }}

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment with Bun..."
          # Add staging deployment commands here

  deploy-production:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    needs: []
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push production image with Bake
        uses: docker/bake-action@v4
        with:
          push: true
          targets: production
          set: |
            production.tags=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest,${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.VERSION }}
            *.cache-from=type=gha
            *.cache-to=type=gha,mode=max
          files: |
            ./environment/docker/docker-bake.hcl
        env:
          REGISTRY: ${{ env.REGISTRY }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          TAG: ${{ steps.version.outputs.VERSION }}
          GO_VERSION: ${{ env.GO_VERSION }}
          BUN_VERSION: ${{ env.BUN_VERSION }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          release_name: Release ${{ steps.version.outputs.VERSION }}
          draft: false
          prerelease: false

      - name: Deploy to production
        run: |
          echo "Deploying version ${{ steps.version.outputs.VERSION }} to production with Bun..."
          # Add production deployment commands here

  notify:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy-staging.result }}" == "success" ] || [ "${{ needs.deploy-production.result }}" == "success" ]; then
            echo "Deployment successful!"
          else
            echo "Deployment failed!"
            exit 1
          fi