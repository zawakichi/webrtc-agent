# Docker Compose for local development
# Use with: docker compose up -d

services:
  webrtc-agent:
    build:
      context: .
      dockerfile: environment/docker/Dockerfile
      args:
        BUN_VERSION: 1.0
        NODE_VERSION: 20
    container_name: webrtc-agent-dev
    ports:
      - "3000:3000"
      - "3001:3001"
      - "9229:9229"  # Debug port
    volumes:
      - ./src:/app/src:cached
      - ./doc:/app/doc:cached
      - ./tests:/app/tests:cached
      - ./package.json:/app/package.json:ro
      - ./bun.lockb:/app/bun.lockb:ro
      - ./bunfig.toml:/app/bunfig.toml:ro
      - ./vite.config.ts:/app/vite.config.ts:ro
      - ./tsconfig*.json:/app/:ro
      - node_modules:/app/node_modules
    environment:
      - NODE_ENV=development
      - DEBUG=webrtc-agent:*
      - LOG_LEVEL=debug
      - DATABASE_URL=mysql://webrtc_user:webrtc_pass@mysql:3306/webrtc_agent
      - REDIS_URL=redis://redis:6379
    env_file:
      - .env
    command: bun run dev
    restart: unless-stopped
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - webrtc-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  mysql:
    image: mysql:8.0
    container_name: webrtc-agent-mysql
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: webrtc_agent
      MYSQL_USER: webrtc_user
      MYSQL_PASSWORD: webrtc_pass
    volumes:
      - mysql_data:/var/lib/mysql
      - ./scripts/db/init:/docker-entrypoint-initdb.d:ro
    command: >
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --default-authentication-plugin=mysql_native_password
      --innodb-buffer-pool-size=256M
      --max-connections=200
    restart: unless-stopped
    networks:
      - webrtc-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-proot_password"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    image: redis:7-alpine
    container_name: webrtc-agent-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./scripts/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf --appendonly yes
    restart: unless-stopped
    networks:
      - webrtc-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Test database for E2E tests
  mysql-test:
    image: mysql:8.0
    container_name: webrtc-agent-mysql-test
    ports:
      - "3307:3306"
    environment:
      MYSQL_ROOT_PASSWORD: test_root
      MYSQL_DATABASE: webrtc_agent_test
      MYSQL_USER: test_user
      MYSQL_PASSWORD: test_pass
    tmpfs:
      - /var/lib/mysql  # Use tmpfs for faster test database
    command: >
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --default-authentication-plugin=mysql_native_password
    networks:
      - webrtc-network
    profiles:
      - test

  # Redis for test environment
  redis-test:
    image: redis:7-alpine
    container_name: webrtc-agent-redis-test
    ports:
      - "6380:6379"
    tmpfs:
      - /data  # Use tmpfs for faster test cache
    command: redis-server --appendonly no --save ""
    networks:
      - webrtc-network
    profiles:
      - test

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  node_modules:
    driver: local

networks:
  webrtc-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16